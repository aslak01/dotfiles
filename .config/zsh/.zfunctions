# functions go here
tldrf() {
  tldr --list | fzf --preview "tldr {1}" --preview-window=right,70% | xargs tldr
}

is_dark_mode() {
  local cache_file="$ZDOTDIR/.theme_cache"
  local pref_file="$HOME/Library/Preferences/.GlobalPreferences.plist"

  # Check if cache exists and is newer than prefs
  if [[ -f "$cache_file" && "$cache_file" -nt "$pref_file" ]]; then
    cat "$cache_file"
    return
  fi

  # Cache miss - check system and update cache
  local mode
  mode=$(defaults read -g AppleInterfaceStyle 2>/dev/null)
  local result
  [[ "$mode" == "Dark" ]] && result="dark" || result="light"
  echo "$result" >"$cache_file"
  echo "$result"
}

configure_themes() {
  local mode
  mode=$(is_dark_mode)

  local vivid_scheme bat_theme lazygit_theme
  case $mode in
  dark)
    vivid_scheme="dracula"
    bat_theme="Dracula"
    lazygit_theme="dracula"
    ;;
  light)
    vivid_scheme="ayu"
    bat_theme="Solarized (light)"
    lazygit_theme="solarized-light"
    ;;
  esac

  local vivid_cache="$ZDOTDIR/.vivid_${vivid_scheme}_cache"

  if [[ ! -f "$vivid_cache" || "$vivid_cache" -ot "$(command -v vivid)" ]]; then
    vivid generate "$vivid_scheme" > "$vivid_cache"
  fi

  export LS_COLORS="$(cat "$vivid_cache")"
  export BAT_THEME="$bat_theme"
  export LAZYGIT_THEME="$lazygit_theme"
}

lshosts() {
  config_dir=~/.ssh/config.d

  if [[ -d "$config_dir" ]]; then
    for file in "$config_dir"/*; do
      if [[ -f "$file" ]]; then
        while IFS= read -r line; do
          if [[ "$line" =~ ^Host\ +([^[:space:]]+) ]]; then
            alias="${match[1]}"
            echo "$alias"
          fi
        done <"$file"
      fi
    done
  else
    echo "Directory $config_dir does not exist."
  fi
}

add_to_path_if_present() {
  if [[ -d "$1" && ":${PATH}:" != *":$1:"* ]]; then
    export PATH="$1:$PATH"
  fi
}

source_if_present() {
  if [[ -d "$1" && -s "$1" ]]; then
    source "$1"
  fi
}

imgcopy() {
  if [[ ! -f "$1" ]]; then
    echo "Error: File '$1' not found"
    return 1
  fi

  local filepath
  filepath=$(realpath "$1")
  osascript -e "set the clipboard to (read (POSIX file \"$filepath\") as picture)"
}

load_keychain_cached() {
  local cache_file="$ZDOTDIR/.keychain_env_cache"
  local keychain_state="$HOME/.keychain/$(hostname)-sh"

  # Check if cache exists and is newer than keychain state
  if [[ -f "$cache_file" && "$cache_file" -nt "$keychain_state" ]]; then
    source "$cache_file"
    return
  fi

  # Cache miss - generate and cache keychain environment
  if command -v keychain >/dev/null; then
    keychain --eval id_ed25519 --quiet 2>/dev/null >"$cache_file"
    source "$cache_file"
  fi
}
